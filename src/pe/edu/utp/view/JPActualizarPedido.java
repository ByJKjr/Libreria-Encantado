/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package pe.edu.utp.view;

import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import pe.edu.utp.controller.ClienteController;
import pe.edu.utp.controller.DetallePedidoController;
import pe.edu.utp.controller.HistorialController;
import pe.edu.utp.controller.PedidoController;
import pe.edu.utp.controller.UsuarioController;
import pe.edu.utp.utils.ArbolBinario;
import pe.edu.utp.model.DetallePedido;
import pe.edu.utp.model.Pedido;

/**
 *
 * @author BRANDY
 */
public class JPActualizarPedido extends javax.swing.JPanel {

    PedidoController objPedidoControl = new PedidoController();
    DetallePedidoController objDetalleControl = new DetallePedidoController();
    ClienteController objClienteControl = new ClienteController();
    UsuarioController objUsuarioControl = new UsuarioController();
    HistorialController objHistorialControl = new HistorialController();

    public HashMap<Integer, ArrayList<DetallePedido>> productosPorPedido = null;
    private HashMap<Integer, Pedido> objPedidos;
    private ArbolBinario arbol = null;
    private int id_pedido;

    public JPActualizarPedido() {
        initComponents();
        actualizarTablaPedido();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        txtBuscar = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        btnAgregarPedido = new javax.swing.JButton();
        btnActualizarProducto = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnEliminar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        lblMonto = new javax.swing.JLabel();
        btnActualizar1 = new javax.swing.JButton();
        btnVerPedido = new javax.swing.JButton();
        btnAgregarPedido1 = new javax.swing.JButton();
        btnActualizarPedido1 = new javax.swing.JButton();
        btnActualizarPedido = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        lblTotal = new javax.swing.JLabel();
        lblIGV = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Actualizar Pedido");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 20, -1, -1));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Cliente", "Fecha Venta", "Monto", "Estado"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 670, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE))
        );

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, 670, 180));

        jLabel2.setText("Buscar:");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 80, -1, -1));
        add(txtBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 80, 170, -1));

        jButton1.setBackground(new java.awt.Color(153, 204, 255));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pe/edu/utp/img/buscar.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 75, 40, 30));

        btnAgregarPedido.setBackground(new java.awt.Color(153, 255, 153));
        btnAgregarPedido.setText("Agregar");
        btnAgregarPedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarPedidoActionPerformed(evt);
            }
        });
        add(btnAgregarPedido, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 470, 110, 30));

        btnActualizarProducto.setBackground(new java.awt.Color(153, 153, 255));
        btnActualizarProducto.setText("Actualizar");
        btnActualizarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarProductoActionPerformed(evt);
            }
        });
        add(btnActualizarProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 390, 110, 30));

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Num.", "Producto", "Precio", "Cantidad", "Subtotal"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 664, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                .addContainerGap())
        );

        add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 360, 670, 170));

        jLabel5.setText("Contenido del pedido:");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 320, 130, 34));

        jLabel4.setText("Pedidos:");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 60, 34));

        btnEliminar.setBackground(new java.awt.Color(255, 102, 102));
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 430, 110, 30));

        jLabel3.setText("Monto: S/");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 530, -1, -1));

        lblMonto.setText("0.00");
        add(lblMonto, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 530, -1, -1));

        btnActualizar1.setBackground(new java.awt.Color(153, 255, 153));
        btnActualizar1.setText("Actualizar Estado");
        btnActualizar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizar1ActionPerformed(evt);
            }
        });
        add(btnActualizar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 160, 110, 30));

        btnVerPedido.setBackground(new java.awt.Color(255, 153, 153));
        btnVerPedido.setText("Ver Pedido");
        btnVerPedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerPedidoActionPerformed(evt);
            }
        });
        add(btnVerPedido, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 200, 110, 30));

        btnAgregarPedido1.setBackground(new java.awt.Color(255, 255, 102));
        btnAgregarPedido1.setText("Agregar");
        btnAgregarPedido1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarPedido1ActionPerformed(evt);
            }
        });
        add(btnAgregarPedido1, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 240, 110, 30));

        btnActualizarPedido1.setBackground(new java.awt.Color(102, 102, 255));
        btnActualizarPedido1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pe/edu/utp/img/actualizar-flecha.png"))); // NOI18N
        btnActualizarPedido1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarPedido1ActionPerformed(evt);
            }
        });
        add(btnActualizarPedido1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 530, 40, 30));

        btnActualizarPedido.setBackground(new java.awt.Color(0, 102, 255));
        btnActualizarPedido.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pe/edu/utp/img/actualizar-flecha.png"))); // NOI18N
        btnActualizarPedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarPedidoActionPerformed(evt);
            }
        });
        add(btnActualizarPedido, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 310, 40, 30));

        jLabel6.setText("Total: S/");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 570, -1, -1));

        jLabel7.setText("IGV(18%): S/");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 550, -1, -1));

        lblTotal.setText("0.00");
        add(lblTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 570, -1, -1));

        lblIGV.setText("0.00");
        add(lblIGV, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 550, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnAgregarPedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarPedidoActionPerformed
        agregarDetalleProducto();
    }//GEN-LAST:event_btnAgregarPedidoActionPerformed

    private void btnActualizarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarProductoActionPerformed
        JFActualizarDetalle detalle = new JFActualizarDetalle();
        if (obtenerDetalleHashMap() != null) {
            detalle.recibirDatos(obtenerDetalleHashMap(), this);
            detalle.setLocationRelativeTo(null);
            detalle.setVisible(true);
        }

    }//GEN-LAST:event_btnActualizarProductoActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        eliminarDetalleProducto();
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnActualizar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizar1ActionPerformed
        actualizarPedido();
    }//GEN-LAST:event_btnActualizar1ActionPerformed

    private void btnVerPedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerPedidoActionPerformed
        verPedido();
    }//GEN-LAST:event_btnVerPedidoActionPerformed

    private void btnAgregarPedido1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarPedido1ActionPerformed
        JFNuevoPedidoCliente objCliente = new JFNuevoPedidoCliente();
        objCliente.setLocationRelativeTo(null);
        objCliente.setVisible(true);
    }//GEN-LAST:event_btnAgregarPedido1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        actualizarTablaBusqueda();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnActualizarPedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarPedidoActionPerformed
        actualizarTablaPedido();
    }//GEN-LAST:event_btnActualizarPedidoActionPerformed

    private void btnActualizarPedido1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarPedido1ActionPerformed
        actualizarTablaPedido();
        actualizarTablaProducto(id_pedido);
        recargarTablaProductos();
    }//GEN-LAST:event_btnActualizarPedido1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar1;
    private javax.swing.JButton btnActualizarPedido;
    private javax.swing.JButton btnActualizarPedido1;
    private javax.swing.JButton btnActualizarProducto;
    private javax.swing.JButton btnAgregarPedido;
    private javax.swing.JButton btnAgregarPedido1;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnVerPedido;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JLabel lblIGV;
    private javax.swing.JLabel lblMonto;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JTextField txtBuscar;
    // End of variables declaration//GEN-END:variables
//CREAR TABLA
    private DefaultTableModel crearTabla(String[] columna) {
        DefaultTableModel objModel = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Todas las celdas no son editables
            }
        ;
        };
        /*String columna[] = {"Id", "Titulo", "Autor", "Editorial",
            "Categoria", "ISBN", "Publicacion", "Idioma", "Precio", "Stock"};*/
        objModel.setColumnIdentifiers(columna);
        //Estableciendo el modelo al jtable
        //Colocando el inventario de la bd a cada fila de la tabla

        return objModel;
    }

    private DefaultTableModel crearTablaPedidos() {
        String columna[] = {"Id", "Cliente", "Empleado", "Fecha-Pedido",
            "IGV", "Monto", "Estado"};

        return crearTabla(columna);
    }

    private DefaultTableModel crearTablaDetalles() {
        String columna[] = {
            "Num.", "Producto", "Precio", "Cantidad", "Subtotal"
        };

        return crearTabla(columna);
    }

    //--------------ARBOL-------------
    private void actualizarTablaPedido() {
        //Crear tabla
        DefaultTableModel objModel = crearTablaPedidos();
        //DATOS
        List<Pedido> pedidos = objPedidoControl.obtenerTodosLosPedidos();
        arbol = objPedidoControl.agregarDatosArbol();
        //CREACION DEL HASHMAP PEDIDO
        objPedidos = new HashMap<>();

        for (Pedido pedido : pedidos) {
            objModel.addRow(new Object[]{
                pedido.getId_pedido(), pedido.getCliente().toString(), pedido.getEmpleado().toString(),
                pedido.getFecha_pedido(), pedido.getIgv(), pedido.getMonto(), pedido.getEstado()
            });
            //Insertar en el hashmap de pedidos
            objPedidos.put(pedido.getId_pedido(), pedido);
        }
        jTable1.setModel(objModel);
    }

    private void actualizarTablaBusqueda() {
        String nombre = txtBuscar.getText().trim();
        DefaultTableModel objModel = crearTablaPedidos();

        //Obtener el arraylist de pedidos por nombre
        ArrayList<Pedido> pedidos = arbol.buscarPorNombreCliente(nombre);

        //Colocar los datos en la tabla
        for (Pedido pedido : pedidos) {
            objModel.addRow(new Object[]{
                pedido.getId_pedido(), pedido.getCliente().toString(), pedido.getEmpleado().toString(),
                pedido.getFecha_pedido(), pedido.getIgv(), pedido.getMonto(), pedido.getEstado()
            });
        }
        //establecer el modelo
        jTable1.setModel(objModel);
    }
    //-----------HASHMAP-----------

    private void actualizarTablaProducto(int id) {
        // CREAR TABLA
        DefaultTableModel objModel = crearTablaDetalles();

        // HASHMAP CLAVE: ID_PEDIDO, VALOR = LISTA DE PRODUCTOS
        productosPorPedido = objDetalleControl.agregarDatosHashMap();
        ArrayList<DetallePedido> listaDetalles = productosPorPedido.get(id);

        if (listaDetalles == null || listaDetalles.isEmpty()) {
            JOptionPane.showMessageDialog(null, "EL PEDIDO NO CONTIENE NINGUN PRODUCTO O NO EXISTE", "DETALLE PEDIDO", 1);
            return; // Salir del método si no hay productos en el pedido
        }

        // Procesar los detalles de cada pedido
        int cont = 0;
        for (DetallePedido detalle : listaDetalles) {
            cont++;
            // Agregar una fila al modelo de tabla
            objModel.addRow(new Object[]{
                cont,
                detalle.getLibro().toString(),
                detalle.getLibro().getPrecio(),
                detalle.getCantidad(),
                detalle.getSubtotal()
            });
        }

        jTable2.setModel(objModel);
    }

    private void recargarTablaProductos() {
        //Crear tabla
        DefaultTableModel objModel = crearTablaDetalles();
        productosPorPedido = objDetalleControl.agregarDatosHashMap();
        ArrayList<DetallePedido> listaDetalles = productosPorPedido.get(id_pedido);
        if (listaDetalles == null || listaDetalles.isEmpty()) {
            jTable2.setModel(objModel);
            return;
        }

        int cont = 0;
        for (DetallePedido detalle : listaDetalles) {
            objModel.addRow(new Object[]{
                ++cont,
                detalle.getLibro().toString(),
                detalle.getLibro().getPrecio(),
                detalle.getCantidad(),
                detalle.getSubtotal()
            });
        }
        jTable2.setModel(objModel);
        actualizarInformacion();
    }

    private void actualizarPedido() {
        int filaSeleccionada = jTable1.getSelectedRow();
        if (filaSeleccionada != -1) {
            int idPedido = (int) jTable1.getValueAt(filaSeleccionada, 0);
            Pedido pedido = objPedidoControl.obtenerPedidoPorId(idPedido);
            JFActualizarPedido frameActualizar = new JFActualizarPedido(pedido);
            frameActualizar.setLocationRelativeTo(null);
            frameActualizar.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(null, "No se selecciono ningun pedido");
        }
    }

    private void verPedido() {
        int filaSeleccionada = jTable1.getSelectedRow();
        if (filaSeleccionada != -1) {
            int id = (int) jTable1.getValueAt(filaSeleccionada, 0);
            actualizarTablaProducto(id);
            id_pedido = id;

        } else {
            JOptionPane.showMessageDialog(null, "No se selecciono ningun pedido");
        }
    }

    private DetallePedido obtenerDetalleHashMap() {
        ArrayList<DetallePedido> productos = productosPorPedido.get(id_pedido);
        int filaSeleccionada = jTable2.getSelectedRow();
        if (filaSeleccionada != -1) {
            int size = (int) jTable2.getValueAt(filaSeleccionada, 0);
            int cont = 0;
            for (DetallePedido producto : productos) {
                cont++;
                if (cont == size) {
                    return producto;
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "No se selecciono ningun producto");
        }
        return null;

    }

    // Actualiza la informacion del precio total
    private void actualizarInformacion() {
        Pedido pedido = objPedidos.get(id_pedido);
        lblMonto.setText(String.valueOf(pedido.getMonto()));
        lblIGV.setText(String.valueOf(pedido.getIgv()));
        double total = pedido.getMonto() + pedido.getIgv();
        lblTotal.setText(String.valueOf(total));
    }

    //Abre la ventana para configurar el detalle del producto
    private void agregarDetalleProducto() {
        JFAgregarDetalle objAgregar = new JFAgregarDetalle(this, id_pedido);
        objAgregar.setLocationRelativeTo(null);
        objAgregar.setVisible(true);

    }

    private void eliminarDetalleProducto() {
        DetallePedido detalle = obtenerDetalleHashMap();
        objDetalleControl.eliminarDetallePedido(detalle.getId_detalle_pedido());
        JOptionPane.showMessageDialog(null, "Se elimino correctamente");
        //PILAS: AGREGAR AL HISTORIAL
        String fechaActual = LocalDate.now().toString();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm:ss");
        String horaActual = LocalTime.now().format(formatter);
        String actividad = "Se elimino un producto de un pedido";
        objHistorialControl.agregarHistorial(fechaActual, horaActual, actividad);
    }

}
