/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pe.edu.utp.view;

import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import pe.edu.utp.controller.ClienteController;
import pe.edu.utp.controller.DetallePedidoController;
import pe.edu.utp.controller.HistorialController;
import pe.edu.utp.controller.PedidoController;
import pe.edu.utp.controller.ProductoController;
import pe.edu.utp.controller.UsuarioController;
import pe.edu.utp.model.Cliente;
import pe.edu.utp.model.DetallePedido;
import pe.edu.utp.utils.ListaEnlazadaPedido;
import pe.edu.utp.model.Pedido;
import pe.edu.utp.model.Producto;
import pe.edu.utp.model.Usuario;

/**
 *
 * @author BRANDY
 */
public class JFNuevoPedidoProducto extends javax.swing.JFrame {

    /**
     * Creates new form JFNuevoPedidoProductos
     */
    int idCliente, idPedido;
    ProductoController objProductoControl = new ProductoController();
    ClienteController objClienteControl = new ClienteController();
    PedidoController objPedidoControl = new PedidoController();
    DetallePedidoController objDetalleControl = new DetallePedidoController();
    UsuarioController objUsuarioControl = new UsuarioController();
    HistorialController objHistorialControl = new HistorialController();

    ListaEnlazadaPedido lista = new ListaEnlazadaPedido();
    private HashMap<Integer, Producto> map = null;
    List<Producto> productos = null;

    public JFNuevoPedidoProducto() {
        initComponents();
        actualizarTablaProductos();
        agruparInformacionProducto();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lblNumPedido = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblProductos = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        txtBuscar = new javax.swing.JTextField();
        btnBuscar = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        lblCliente = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDetallePedido = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("AÃ‘ADIR PEDIDO");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 10, -1, -1));

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("N. Pedido:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, -1, -1));

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("IGV(18%):   S/");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 370, -1, -1));

        lblNumPedido.setForeground(new java.awt.Color(255, 255, 255));
        lblNumPedido.setText("#");
        getContentPane().add(lblNumPedido, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 70, 20, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Informacion del Pedido");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 40, -1, -1));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("0.00");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 390, 70, -1));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Productos");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 40, -1, -1));

        tblProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Titulo", "Precio(S/)", "Stock"
            }
        ));
        jScrollPane2.setViewportView(tblProductos);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 1, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 110, 330, 270));

        jButton1.setBackground(new java.awt.Color(0, 102, 0));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Guardar Pedido");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 440, -1, 30));

        jButton2.setText("Anterior");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 440, -1, -1));

        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Buscar:");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 74, -1, -1));
        getContentPane().add(txtBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 70, 140, 25));

        btnBuscar.setBackground(new java.awt.Color(153, 204, 255));
        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pe/edu/utp/img/buscar.png"))); // NOI18N
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        getContentPane().add(btnBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 67, 40, 30));

        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Cliente:");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, -1, -1));

        lblCliente.setForeground(new java.awt.Color(255, 255, 255));
        lblCliente.setText("Nombre");
        getContentPane().add(lblCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 90, 150, -1));

        tblDetallePedido.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Num.", "Titulo", "Precio", "Cantidad", "Subtotal"
            }
        ));
        jScrollPane1.setViewportView(tblDetallePedido);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 310, 220));

        jButton4.setText("Ver info");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 390, 130, -1));

        jButton5.setText("Eliminar");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 130, 90, -1));

        jButton6.setText("Actualizar");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 180, 90, -1));

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Total:   S/");
        getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 390, -1, -1));

        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("0.00");
        getContentPane().add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 350, 70, -1));

        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("SubTotal:   S/");
        getContentPane().add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 350, -1, -1));

        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("0.00");
        getContentPane().add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 370, 70, -1));

        jButton7.setText(" Agregar a Pedido");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 390, 130, -1));

        jButton3.setBackground(new java.awt.Color(102, 153, 255));
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pe/edu/utp/img/actualizar-flecha.png"))); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 380, 40, 30));

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pe/edu/utp/img/fondo.jpg"))); // NOI18N
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 820, 480));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        JFNuevoPedidoCliente objCliente = new JFNuevoPedidoCliente();
        objCliente.setLocationRelativeTo(null);
        objCliente.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        agregarProducto();
        actualizarTablaDetallePedido();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        eliminarProducto();
        actualizarTablaDetallePedido();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        JFActualizarDetalle detalle = new JFActualizarDetalle();
        detalle.setLocationRelativeTo(null);
        detalle.setVisible(true);
        DetallePedido producto = obtenerProducto();
        if (producto != null) {
            detalle.recibirDatos(producto, this);
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        mostrarInformacion();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        guardarPedido();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        buscarTabla();
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        actualizarTablaProductos();
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblCliente;
    private javax.swing.JLabel lblNumPedido;
    private javax.swing.JTable tblDetallePedido;
    private javax.swing.JTable tblProductos;
    private javax.swing.JTextField txtBuscar;
    // End of variables declaration//GEN-END:variables

    //RECIBIR UN DATO DE ID PEDIDO
    public void recibirDato(int id) {
        this.idCliente = id;
        this.idPedido = buscarNumPedido();
        lblCliente.setText(objClienteControl.obtenerClientePorId(idCliente).toString());
        lblNumPedido.setText(String.valueOf(idPedido));
    }

    //------------------TABLAS---------------------------
    //CREAR TABLA
    private DefaultTableModel crearTabla(String[] columna) {
        DefaultTableModel objModel = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Todas las celdas no son editables
            }
        ;
        };
        objModel.setColumnIdentifiers(columna);

        return objModel;
    }

    private DefaultTableModel crearTablaProducto() {
        String columna[] = {
            "Id", "Titulo", "Precio", "Stock"
        };
        return crearTabla(columna);
    }

    private DefaultTableModel crearTablaDetallePedido() {
        String columna[] = {
            "Num.", "Titulo", "Precio", "Cantidad", "Subtotal"
        };
        return crearTabla(columna);
    }

    private void actualizarTablaProductos() {

        DefaultTableModel objModel = crearTablaProducto();

        productos = objProductoControl.obtenerTodosLosProductos();
        agruparInformacionProducto();

        for (Producto objProducto : productos) {
            objModel.addRow(new Object[]{objProducto.getId_libro(), objProducto.getTitulo(),
                objProducto.getPrecio(), objProducto.getCantidad()});
        }

        tblProductos.setModel(objModel);
    }

    public void actualizarTablaDetallePedido() {

        DefaultTableModel objModel = crearTablaDetallePedido();

        DetallePedido[] productosPedido = lista.imprimirLista();

        int cont = 0;
        for (DetallePedido objProducto : productosPedido) {
            cont++;
            objModel.addRow(new Object[]{
                cont,
                objProducto.getLibro().toString(),
                objProducto.getLibro().getPrecio(),
                objProducto.getCantidad(),
                (objProducto.getLibro().getPrecio() * objProducto.getCantidad())
            });
        }

        tblDetallePedido.setModel(objModel);

    }

    //----------------INFORMACION QUE SE MOSTRARA EN LA VENTANA---------
    //AGRUPA LOS LIBROS EN UN HASHMAP CLAVE (ID_LIBRO) Y VALOR (OBJETO PRODUCTO)
    private void agruparInformacionProducto() {
        productos = objProductoControl.obtenerTodosLosProductos();
        map = new HashMap<>();
        for (Producto producto : productos) {
            map.put(producto.getId_libro(), producto);
        }
    }

    //MOSTRAR INFORMACION
    private void mostrarInformacion() {
        int filaSeleccionada = tblProductos.getSelectedRow();
        if (filaSeleccionada != -1) {
            int key = (int) tblProductos.getValueAt(filaSeleccionada, 0);
            Producto producto = map.get(key);
            JOptionPane.showMessageDialog(null, "\t\tINFORMACION"
                    + "\nLibro: " + producto.getTitulo()
                    + "\nAutor: " + producto.getAutor().toString()
                    + "\nEditorial: " + producto.getEditorial().toString()
                    + "\nCategoria: " + producto.getCategoria().toString()
                    + "\nISBN :" + producto.getIsbn()
                    + "\nFecha Publicacion :" + producto.getFecha_publicacion()
                    + "\nIdioma :" + producto.getIdioma()
                    + "\nPrecio : S/" + producto.getPrecio()
                    + "\nStock : " + producto.getCantidad());
        } else {
            JOptionPane.showMessageDialog(null, "No se selecciono ningun producto");
        }
    }

    private int buscarNumPedido() {
        List<Pedido> pedidos = objPedidoControl.obtenerTodosLosPedidos();
        int cont = 0;
        for (Pedido pedido : pedidos) {
            cont++;
        }
        return (cont + 1);
    }

    //--------------------------LISTA ENLAZADA FUNCIONES----------------
    private void agregarProducto() {
        int filaSeleccionada = tblProductos.getSelectedRow();
        if (filaSeleccionada != -1) {
            // Obtener datos de la fila seleccionada
            int idProducto = (int) tblProductos.getValueAt(filaSeleccionada, 0);
            if (verificarExistenciaProducto(idProducto)) {
                int cantidad = Integer.parseInt(JOptionPane.showInputDialog("Ingrese la cantidad: "));
                Producto libro = objProductoControl.obtenerProductoPorId(idProducto);
                double subtotal = (libro.getPrecio() * cantidad);
                DetallePedido producto = new DetallePedido(cantidad, subtotal, libro, null);//cambiar el idpedido
                lista.insertarAlFinal(producto);
            } else {
                JOptionPane.showMessageDialog(null, "El producto ya ha sido agregado");
            }

        } else {
            JOptionPane.showMessageDialog(null, "No se selecciono ningun producto");
        }

    }

    private boolean verificarExistenciaProducto(int idLibro) {
        DetallePedido[] pedidos = lista.imprimirLista();
        for (DetallePedido pedido : pedidos) {
            if (idLibro == pedido.getLibro().getId_libro()) {
                return false;
            }
        }
        return true;
    }

    private void eliminarProducto() {
        int filaSeleccionada = tblDetallePedido.getSelectedRow();
        if (filaSeleccionada != -1) {
            int index = (int) tblDetallePedido.getValueAt(filaSeleccionada, 0);
            if (lista.eliminarPorIndice(index - 1)) {
                JOptionPane.showMessageDialog(null, "Eliminado correctamente");
            } else {
                JOptionPane.showMessageDialog(null, "ERROR: Algo salio mal");
            }
        } else {
            JOptionPane.showMessageDialog(null, "No se selecciono ningun Producto");
        }
    }

    private DetallePedido obtenerProducto() {
        DetallePedido detalle;
        int filaSeleccionada = tblDetallePedido.getSelectedRow();
        if (filaSeleccionada != -1) {
            int num = (int) tblDetallePedido.getValueAt(filaSeleccionada, 0);
            detalle = lista.buscarProductoPorIndice(num - 1);
        } else {
            JOptionPane.showMessageDialog(null, "No se selecciono ningun Producto");
            return null;
        }
        return detalle;
    }

    private void guardarPedido() {
        DetallePedido[] detalles = lista.imprimirLista();
        double monto = 0;
        if (detalles.length == 0) {
            JOptionPane.showMessageDialog(null, "No se agrego ningun producto en el pedido");
            return;
        }

        //Datos
        Date fecha = new Date();
        SimpleDateFormat formato = new SimpleDateFormat("yyyy-MM-dd");
        String fechaActual = formato.format(fecha.getTime());

        String estado = "Pendiente";

        System.out.println(fechaActual);

        //hallar el monto
        for (DetallePedido detallePedido : detalles) {
            double subtotal = detallePedido.getSubtotal();
            monto += subtotal;
        }
        //hallar el igv
        double igv = monto * (0.18);
        //Agregar pedido
        Cliente cliente = objClienteControl.obtenerClientePorId(idCliente);
        Usuario empleado = objUsuarioControl.obtenerUsuarioPorId(7);
        objPedidoControl.guardarPedido(fechaActual, monto, estado, igv, cliente, empleado);
        Pedido pedido = objPedidoControl.obtenerPedidoPorId(idPedido);

        //agregar cada producto de ese pedido
        for (DetallePedido detalle : detalles) {
            detalle.setPedido(pedido);
            objDetalleControl.guardarDetallePedido(detalle.getCantidad(),
                    detalle.getSubtotal(), detalle.getLibro(), detalle.getPedido());
        }
        JOptionPane.showMessageDialog(null, "Se guardo correctamente");

        //PILAS: AGREGAR AL HISTORIAL
        String fechaDate = LocalDate.now().toString();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm:ss");
        String horaActual = LocalTime.now().format(formatter);
        String actividad = "Se agrego un nuevo pedido";
        objHistorialControl.agregarHistorial(fechaDate, horaActual, actividad);
        //----
        this.dispose();
    }

    //--------------QUICKSORT Y BUSQUEDA BINARIA-----------
    private void buscarTabla() {
        String titulo = txtBuscar.getText().trim();
        DefaultTableModel objModel = crearTablaProducto();

        quickSort(productos, 0, productos.size() - 1);
        int index = busquedaBinaria(productos, titulo);
        
        if (index == -1) {
            JOptionPane.showMessageDialog(null, "No se encontro el producto");
            return;
        }
        Producto objProducto = productos.get(index);

        objModel.addRow(new Object[]{objProducto.getId_libro(), objProducto.getTitulo(),
            objProducto.getPrecio(), objProducto.getCantidad()});

        tblProductos.setModel(objModel);
    }

    public static void quickSort(List<Producto> productos, int low, int high) {
        if (low < high) {
            int pi = partition(productos, low, high);

            quickSort(productos, low, pi - 1);  // Antes de pi
            quickSort(productos, pi + 1, high); // DespuÃ©s de pi
        }
    }

    private static int partition(List<Producto> productos, int low, int high) {
        Producto pivot = productos.get(high);
        int i = (low - 1); // Ã­ndice de elemento mÃ¡s pequeÃ±o

        for (int j = low; j < high; j++) {
            // Si el elemento actual es mÃ¡s pequeÃ±o o igual al pivot
            if (productos.get(j).getTitulo().compareTo(pivot.getTitulo()) <= 0) {
                i++;

                // Intercambiar productos.get(i) y productos.get(j)
                Producto temp = productos.get(i);
                productos.set(i, productos.get(j));
                productos.set(j, temp);
            }
        }

        // Intercambiar productos.get(i+1) y productos.get(high) (o pivot)
        Producto temp = productos.get(i + 1);
        productos.set(i + 1, productos.get(high));
        productos.set(high, temp);

        return i + 1;
    }

    //BUSQUEDA BINARIA
    public static int busquedaBinaria(List<Producto> productos, String titulo) {
        int low = 0;
        int high = productos.size() - 1;

        while (low <= high) {
            int mid = (low + high) / 2;
            Producto midVal = productos.get(mid);
            int cmp = midVal.getTitulo().compareTo(titulo);

            if (cmp < 0) {
                low = mid + 1;
            } else if (cmp > 0) {
                high = mid - 1;
            } else {
                return mid; // TÃ­tulo encontrado
            }
        }
        return -1; // TÃ­tulo no encontrado
    }

}
