/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package pe.edu.utp.view;

import java.awt.print.PrinterException;
import java.text.MessageFormat;
import java.util.List;
import javax.print.attribute.HashPrintRequestAttributeSet;
import javax.print.attribute.PrintRequestAttributeSet;
import javax.print.attribute.standard.OrientationRequested;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import pe.edu.utp.controller.DetallePedidoController;
import pe.edu.utp.model.DetallePedido;

/**
 *
 * @author LAB-USR-ATE
 */
public class JPReporteVentas extends javax.swing.JPanel {

    DetallePedidoController objDetalleControl = new DetallePedidoController();
    private List<DetallePedido> detalles = null;

    public JPReporteVentas() {
        initComponents();
        actualizarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtBuscar = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("REPORTE VENTAS");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 20, -1, -1));

        jLabel2.setText("Buscar:");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 80, -1, -1));
        add(txtBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 80, 240, -1));

        jButton1.setBackground(new java.awt.Color(153, 204, 255));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pe/edu/utp/img/buscar.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 75, 40, 30));

        jButton2.setBackground(new java.awt.Color(255, 102, 102));
        jButton2.setText("PDF");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 550, -1, 30));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Nombre", "Apellido", "Fecha", "Producto", "Cantidad"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 740, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE)
        );

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 150, 740, 390));

        jButton3.setBackground(new java.awt.Color(153, 204, 255));
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pe/edu/utp/img/actualizar-flecha.png"))); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 540, 40, 30));

        jButton4.setBackground(new java.awt.Color(102, 255, 102));
        jButton4.setText("Ordenar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 550, -1, 30));
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        buscarTabla();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        ordenarTabla();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        pdf();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        actualizarTabla();
    }//GEN-LAST:event_jButton3ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtBuscar;
    // End of variables declaration//GEN-END:variables

    private DefaultTableModel crearTabla() {
        DefaultTableModel objModel = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Todas las celdas no son editables
            }
        ;
        };
            String columna[] = {
            "ID", "Producto", "Cantidad", "Subtotal"
        };
        objModel.setColumnIdentifiers(columna);
        //Estableciendo el modelo al jtable
        //Colocando el inventario de la bd a cada fila de la tabla

        return objModel;
    }

    private void actualizarTabla() {

        DefaultTableModel objModel = crearTabla();

        detalles = objDetalleControl.obtenerTodosLosDetallesPedidos();

        for (DetallePedido detalle : detalles) {
            objModel.addRow(new Object[]{
                detalle.getId_detalle_pedido(), detalle.getLibro().toString(), detalle.getCantidad(),
                detalle.getSubtotal()
            });

        }

        jTable1.setModel(objModel);
        jTable1.getColumnModel().getColumn(0).setPreferredWidth(1);

    }

    //ORDENAR TABLA
    private void ordenarTabla() {
        DefaultTableModel objModel = crearTabla();

        quickSortPorTitulo(detalles, 0, detalles.size() - 1);

        for (DetallePedido detalle : detalles) {
            objModel.addRow(new Object[]{
                detalle.getId_detalle_pedido(), detalle.getLibro().toString(), detalle.getCantidad(),
                detalle.getSubtotal()
            });

        }

        jTable1.setModel(objModel);
        jTable1.getColumnModel().getColumn(0).setPreferredWidth(1);

    }

    //BUSCAR TABLA
    private void buscarTabla() {
        String titulo = txtBuscar.getText().trim();
        DefaultTableModel objModel = crearTabla();

        quickSortPorTitulo(detalles, 0, detalles.size() - 1);
        DetallePedido detalle = busquedaBinaria(detalles, titulo);

        objModel.addRow(new Object[]{
            detalle.getId_detalle_pedido(), detalle.getLibro().toString(), detalle.getCantidad(),
            detalle.getSubtotal()
        });
        jTable1.setModel(objModel);
    }

    // QuickSort por título del libro
    public static void quickSortPorTitulo(List<DetallePedido> detalles, int low, int high) {
        if (low < high) {
            int pi = partitionPorTitulo(detalles, low, high);
            quickSortPorTitulo(detalles, low, pi - 1);
            quickSortPorTitulo(detalles, pi + 1, high);
        }
    }

    private static int partitionPorTitulo(List<DetallePedido> detalles, int low, int high) {
        DetallePedido pivot = detalles.get(high);
        int i = (low - 1);

        for (int j = low; j < high; j++) {
            if (detalles.get(j).getLibro().getTitulo().compareTo(pivot.getLibro().getTitulo()) <= 0) {
                i++;
                DetallePedido temp = detalles.get(i);
                detalles.set(i, detalles.get(j));
                detalles.set(j, temp);
            }
        }

        DetallePedido temp = detalles.get(i + 1);
        detalles.set(i + 1, detalles.get(high));
        detalles.set(high, temp);

        return i + 1;
    }

    //Busqueda binaria
    // Método para buscar un DetallePedido por título de libro en una lista ordenada
    public static DetallePedido busquedaBinaria(List<DetallePedido> detalles, String tituloBuscado) {
        int low = 0;
        int high = detalles.size() - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2;
            String tituloActual = detalles.get(mid).getLibro().getTitulo();

            int resultadoComparacion = tituloActual.compareTo(tituloBuscado);

            if (resultadoComparacion == 0) {
                return detalles.get(mid);
            } else if (resultadoComparacion < 0) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }

        return null; // No encontrado
    }

    //PDF
    private void pdf() {
        MessageFormat header = new MessageFormat("Usuarios");
        MessageFormat footer = new MessageFormat("Página {0}");

        try {
            PrintRequestAttributeSet set = new HashPrintRequestAttributeSet();
            set.add(OrientationRequested.LANDSCAPE);

            boolean complete = jTable1.print(JTable.PrintMode.FIT_WIDTH, header, footer, true, set, false);
            if (complete) {
                System.out.println("Impresión completada.");
            } else {
                System.out.println("Impresión cancelada.");
            }
        } catch (PrinterException e) {
            System.err.println("Error durante la impresión: " + e.getMessage());
        }
    }
}
